"""–ú–æ–¥—É–ª—å —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞"""
import random

import httpx
import requests
import urllib.parse
from twitchio import Message
from twitchio.ext import commands
from twitchio.models import PartialUser
from twitchio.http import TwitchHTTP
import asyncio
import datetime
import json

def init_bot(nickname, root):
    try:
        with open("tokens.json", "r", encoding="utf-8") as tokens:
            config = json.load(tokens)
        token = config["token"]
        client_secret = config["client_secret"]
        client_id = config["client_id"]

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        bot = Bot(nickname, token, client_secret, client_id, root)
        root.bot_instance = bot
        loop.run_until_complete(bot.run())
    except Exception as e:
        print(e)

class Bot(commands.Bot):
    def __init__(self, nickname, token, client_secret, client_id, root):
        self.nickname = nickname
        self.channel = None
        self.nickname_ = "#" + nickname
        self.token = token
        self.client_secret = client_secret
        self.client_id = client_id
        self.root = root
        self.chatters = []
        self.message_count = 1
        self.http = TwitchHTTP(client_id=self.client_id, client=self, client_secret=self.client_secret)
        self.user = None # PartialUser
        self.bot_id = None

        # –†—É–ª–µ—Ç–∫–∞
        self.lose_count = 6
        self.random_count = None
        self.roulette_is_run = False

        # –ë–æ–º–±–∞
        self.colors = ['–∑–µ–ª–µ–Ω—ã–π', '–∫—Ä–∞—Å–Ω—ã–π', '—Å–∏–Ω–∏–π']
        self.correct_color = None

        # Wodly
        self.correct_word = None
        self.hidden_word = ''
        with open('russian_nouns.txt', 'r', encoding='utf-8') as file:
            self.words = [line.strip() for line in file]

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑—Ä–∏—Ç–µ–ª–µ–π
        self.prew_viewers = 0
        self.cur_viewers = 0

        super().__init__(
            prefix='!',
            token=self.token,
            client_secret=self.client_secret,
            client_id=client_id,
            initial_channels=[self.nickname_])

    async def event_ready(self):
        self.channel = self.get_channel(self.nickname)
        owner = await self.fetch_users(names=[self.nickname])
        owner_id = owner[0].id # –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ self.user, –¥–∞–ª–µ–µ –Ω–µ –Ω—É–∂–µ–Ω
        bot = await self.fetch_users(names=['k1rkasbot1k'])
        self.bot_id = bot[0].id
        self.user = PartialUser(self.http, owner_id, self.nickname)
        await self.channel.send(f'{self.nick} –∑–∞–ø—É—â–µ–Ω!')
        self.root.console_add_line(f'{self.nick} is launched on the channel {self.nickname}')

    @commands.command(name='–ø—Ä–∏–≤–µ—Ç')
    async def hello_command(self, ctx: commands.Context):
        await ctx.send(f'–ü—Ä–∏–≤–µ—Ç, {ctx.author.name}! üëã')
        self.root.console_add_line(f'{ctx.author.name} uses the command "!–ø—Ä–∏–≤–µ—Ç"')

    @commands.command(name='–≤—Ä–µ–º—è')
    async def time(self, ctx: commands.Context):
        await ctx.send(f'{ctx.author.name} –º–æ—ë –≤—Ä–µ–º—è: {datetime.datetime.now().strftime('%H:%M')}')
        self.root.console_add_line(f'{ctx.author.name} uses the command "!–≤—Ä–µ–º—è"')

    @commands.command(name='–≤—É–∑')
    async def university(self, ctx: commands.Context):
        await ctx.send(f'{ctx.author.name} –±–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –≤ –ª—É—á—à–µ–º –≤—É–∑–µ –Ω–∞ —Å–≤–µ—Ç–µ -> https://ikit.sfu-kras.ru')
        self.root.console_add_line(f'{ctx.author.name} uses the command "!–≤—É–∑"')

    @commands.command(name='—Ä—É–ª–µ—Ç–∫–∞')
    async def roulette(self, ctx: commands.Context, count=1):
        self.root.console_add_line(f'{ctx.author.name} uses the command "!—Ä—É–ª–µ—Ç–∫–∞"') if count == 1 else (
            self.root.console_add_line(f'{ctx.author.name} uses the command "!—Ä—É–ª–µ—Ç–∫–∞" with arguments {count}'))
        if count > 1:
            self.roulette_is_run = False
        if self.roulette_is_run is False:
            if 6 >= count > 0:
                self.roulette_is_run = True
                self.random_count = random.randint(count, 6)
                if self.roul_game():
                    await ctx.send(f'{ctx.author.name} –≤—ã–∂–∏–≤–∞–µ—Ç!')
                else:
                    try:
                        await self.user.timeout_user(token=self.token[6:], moderator_id=self.bot_id, user_id=ctx.author.id, duration=60, reason='–ø—Ä–æ–∏–≥—Ä–∞–ª –≤ —Ä—É–ª–µ—Ç–∫—É...')
                        await ctx.send(f'{ctx.author.name} –ø—Ä–æ–∏–≥—Ä–∞–ª –≤ —Ä—É–ª–µ—Ç–∫—É...')
                    except Exception:
                        await ctx.send(f'{ctx.author.name} —á—É–¥–æ–º –≤—ã–∂–∏–≤–∞–µ—Ç')
            else:
                await ctx.send(f'{ctx.author.name} —Å—Ç–æ–ª—å–∫–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤ –Ω–µ –≤–ª–µ–∑–µ—Ç...')
        elif self.roulette_is_run is True:
            if self.roul_game():
                await ctx.send(f'{ctx.author.name} –≤—ã–∂–∏–≤–∞–µ—Ç!')
            else:
                try:
                    await self.user.timeout_user(token=self.token[6:], moderator_id=self.bot_id, user_id=ctx.author.id, duration=60, reason='–ø—Ä–æ–∏–≥—Ä–∞–ª –≤ —Ä—É–ª–µ—Ç–∫—É...')
                    await ctx.send(f'{ctx.author.name} –ø—Ä–æ–∏–≥—Ä–∞–ª –≤ —Ä—É–ª–µ—Ç–∫—É...')
                except Exception:
                    await ctx.send(f'{ctx.author.name} —á—É–¥–æ–º –≤—ã–∂–∏–≤–∞–µ—Ç')

    def roul_game(self):
        if self.random_count < self.lose_count:
            self.random_count += 1
            return True
        elif self.random_count >= self.lose_count:
            self.roulette_is_run = False
            return False
        else:
            return True

    @commands.command(name='–∫—É–±–∏–∫')
    async def roll(self, ctx: commands.Context, number=100):
        message = f'{ctx.author.name} uses the command "!–∫—É–±–∏–∫"' if number==100 \
            else f'{ctx.author.name} uses the command "!–∫—É–±–∏–∫" with arguments "{number}"'
        self.root.console_add_line(message)
        random_cube = random.randint(1, number)
        if random_cube == number:
            await ctx.send(f'{ctx.author.name} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö! {number} üé≤')
        elif random_cube == 1:
            await ctx.send(f'{ctx.author.name} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–ª! 1 üé≤')
        else:
            await ctx.send(f'{ctx.author.name} –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_cube} üé≤')

    @commands.command(name='–∫–æ–ø–∞—Ç—å')
    async def mine(self, ctx: commands.Context):
        self.root.console_add_line(f'{ctx.author.name} uses the command "!–∫–æ–ø–∞—Ç—å"')
        with open('info.json', 'r', encoding='utf-8') as f:
            info = json.load(f)
        phrase = random.choice(info['mine'])
        await ctx.send(f'{ctx.author.name} {phrase}!')

    @commands.command(name='—á–∞–π')
    async def tea(self, ctx: commands.Context, user=None):
        self.root.console_add_line(f'{ctx.author.name} uses the command "!—á–∞–π" with arguments {user}')\
            if user else self.root.console_add_line(f'{ctx.author.name} uses the command "!—á–∞–π"')
        if user and user in self.chatters:
            await ctx.send(f'{ctx.author.name} —É–≥–æ—Å—Ç–∏–ª —á–∞–µ–º {user}')
        else:
            await ctx.send(f'{ctx.author.name} —É–≥–æ—Å—Ç–∏–ª —á–∞–µ–º {random.choice(self.chatters)}')

    @commands.command(name='–±–æ–º–±–∞')
    async def bomb(self, ctx: commands.Context):
        self.root.console_add_line(f'{ctx.author.name} uses the command "!–±–æ–º–±–∞"')
        if self.correct_color is None:
            await ctx.send('–£–≥–∞–¥–∞–π —Ü–≤–µ—Ç, —á—Ç–æ–±—ã —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –±–æ–º–±—É! (!–∑–µ–ª—ë–Ω—ã–π, !–∫—Ä–∞—Å–Ω—ã–π, !—Å–∏–Ω–∏–π)')
            self.correct_color = random.choice(self.colors)

    @commands.command(name='–∑–µ–ª—ë–Ω—ã–π', aliases=['–∑–µ–ª–µ–Ω—ã–π', 'green']) # —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –≤—Ä–∞–∏–∞–Ω—Ç–∞–º–∏
    async def bomb_green(self, ctx: commands.Context):
        self.root.console_add_line(f'{ctx.author.name} uses the command "!–∑–µ–ª—ë–Ω—ã–π"')
        if self.correct_color is not None:
            if self.correct_color in ['–∑–µ–ª—ë–Ω—ã–π', '–∑–µ–ª–µ–Ω—ã–π']:
                await ctx.send(f'{ctx.author.name} —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–ª –±–æ–º–±—É!')
            else:
                try:
                    await self.user.timeout_user(token=self.token[6:], moderator_id=self.bot_id, user_id=ctx.author.id,
                                                 duration=60, reason='—Ç–∞–∫–æ–π —Å–µ–±–µ —Å–∞–ø—ë—Ä...')
                    await ctx.send(f'{ctx.author.name} –æ–∫–∞–∑–∞–ª—Å—è —Ç–∞–∫–æ–π —Å–µ–±–µ —Å–∞–ø—ë—Ä...')
                except Exception:
                    await ctx.send(f'{ctx.author.name} —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç –≤–∑—Ä—ã–≤–∞!')
            self.correct_color = None
        else:
            await ctx.send(f'{ctx.author.name} –∏–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! –ø–∏—à–∏ "!–±–æ–º–±–∞"')

    @commands.command(name='–∫—Ä–∞—Å–Ω—ã–π')
    async def bomb_red(self, ctx: commands.Context):
        self.root.console_add_line(f'{ctx.author.name} uses the command "!–∫—Ä–∞—Å–Ω—ã–π"')
        if self.correct_color is not None:
            if self.correct_color == '–∫—Ä–∞—Å–Ω—ã–π':
                await ctx.send(f'{ctx.author.name} —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–ª –±–æ–º–±—É!')
            else:
                try:
                    await self.user.timeout_user(token=self.token[6:], moderator_id=self.bot_id, user_id=ctx.author.id,
                                                 duration=60, reason='—Ç–∞–∫–æ–π —Å–µ–±–µ —Å–∞–ø—ë—Ä...')
                    await ctx.send(f'{ctx.author.name} –æ–∫–∞–∑–∞–ª—Å—è —Ç–∞–∫–æ–π —Å–µ–±–µ —Å–∞–ø—ë—Ä...')
                except Exception:
                    await ctx.send(f'{ctx.author.name} —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç –≤–∑—Ä—ã–≤–∞!')
            self.correct_color = None
        else:
            await ctx.send(f'{ctx.author.name} –∏–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! –ø–∏—à–∏ "!–±–æ–º–±–∞"')

    @commands.command(name='—Å–∏–Ω–∏–π')
    async def bomb_blue(self, ctx: commands.Context):
        self.root.console_add_line(f'{ctx.author.name} uses the command "!—Å–∏–Ω–∏–π"')
        if self.correct_color is not None:
            if self.correct_color == '—Å–∏–Ω–∏–π':
                await ctx.send(f'{ctx.author.name} —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–ª –±–æ–º–±—É!')
            else:
                try:
                    await self.user.timeout_user(token=self.token[6:], moderator_id=self.bot_id, user_id=ctx.author.id,
                                                 duration=60, reason='—Ç–∞–∫–æ–π —Å–µ–±–µ —Å–∞–ø—ë—Ä...')
                    await ctx.send(f'{ctx.author.name} –æ–∫–∞–∑–∞–ª—Å—è —Ç–∞–∫–æ–π —Å–µ–±–µ —Å–∞–ø—ë—Ä...')
                except Exception:
                    await ctx.send(f'{ctx.author.name} —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç –≤–∑—Ä—ã–≤–∞!')
            self.correct_color = None
        else:
            await ctx.send(f'{ctx.author.name} –∏–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! –ø–∏—à–∏ "!–±–æ–º–±–∞"')

    @commands.command(name='—Å–ª–æ–≤–æ')
    async def word(self, ctx: commands.Context, word=None):
        self.root.console_add_line(f'{ctx.author.name} uses the command "—Å–ª–æ–≤–æ" with arguments {word}') if word \
            else self.root.console_add_line(f'{ctx.author.name} uses the command "—Å–ª–æ–≤–æ"')
        if self.correct_word is None:
            self.correct_word = random.choice(self.words).strip()
            self.hidden_word = '‚ñØ' * len(self.correct_word)
            print(self.correct_word)
            await ctx.send(f'{ctx.author.name} –ø–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ! –û–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(self.correct_word)} –±—É–∫–≤!')
        elif self.correct_word is not None and word in self.words:
            hidden_word_list = list(self.hidden_word)
            for i, let in enumerate(self.correct_word):
                if let in word:
                    hidden_word_list[i] = let
            self.hidden_word = ''.join(hidden_word_list)
            if '‚ñØ' in self.hidden_word:
                await ctx.send(f'{ctx.author.name} —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {self.hidden_word}')
            else:
                encoded_word = urllib.parse.quote(self.correct_word.lower())
                wiki_url = f"https://ru.wikipedia.org/w/index.php?search={encoded_word}"
                await ctx.send(f'{ctx.author.name} –≤—ã –æ—Ç–≥–∞–¥–∞–ª–∏ –≤—Å–µ –±—É–∫–≤—ã! –ó–∞–≥–∞–¥–∞–Ω–æ–µ —Å–ª–æ–≤–æ: {self.correct_word}. '
                               f'–ü–æ—á–∏—Ç–∞—Ç—å –∑–¥–µ—Å—å -> {wiki_url}')
                self.correct_word = None
        elif word not in self.words:
            await ctx.send(f'{ctx.author.name} —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –º–æ—ë–º —Å–ª–æ–≤–∞—Ä–µ!')


    # –ü–æ–ª—É—á–∏—Ç—å data (–∫–æ–ª-–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π –∏ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏)
    async def get_viewer_count(self):
        nickname_ = "https://api.twitch.tv/helix/streams?user_login=" + self.nickname
        async with httpx.AsyncClient() as client:
            response = await client.get(nickname_, headers={
                'Client-ID': f'{self.client_id}',
                'Authorization': f'Bearer {self.token[6:]}'
            })
            data = response.json()
            if data['data']:
                viewer_count = data['data'][0]['viewer_count']
                started_at = data['data'][0]['started_at']
                stream_duration = self.calculate_stream_duration(started_at)
                return viewer_count, stream_duration
            return 0, '–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –Ω–µ –≤–µ–¥–µ—Ç—Å—è'

    def calculate_stream_duration(self, started_at):
        start_time = datetime.fromisoformat(started_at[:-1])
        duration = datetime.utcnow() - start_time
        return str(duration).split('.')[0]

    @commands.command(name='–∑—Ä–∏—Ç–µ–ª–∏')
    async def viewers_info(self, ctx: commands.Context):
        if ctx.author.is_mod:
            self.cur_viewer, stream_dur = await self.get_viewer_count()
            diff = self.cur_viewer - self.prew_viewers
            if diff == 0:
                await ctx.send(f'{self.cur_viewer} ({stream_dur})!')
            elif diff > 0:
                await ctx.send(f'{self.cur_viewer} + {diff} ({stream_dur})!')
            elif diff < 0:
                await ctx.send(f'{self.cur_viewer} - {diff} ({stream_dur})!')
            self.prew_viewers = self.cur_viewer

    async def viewer_timer(self):
        self.cur_viewer, stream_dur = await self.get_viewer_count()
        diff = self.cur_viewer - self.prew_viewers
        if diff == 0:
            await self.channel.send(f'{self.cur_viewer} ({stream_dur})!')
        elif diff > 0:
            await self.channel.send(f'{self.cur_viewer} + {diff} ({stream_dur})!')
        elif diff < 0:
            await self.channel.send(f'{self.cur_viewer} - {diff} ({stream_dur})!')
        self.prew_viewers = self.cur_viewer


    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π & –±—É–¥—É—â–∞—è –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è
    async def event_message(self, message: Message):
        if message.author is None:
            pass # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        else:
            self.message_count += 1
            if self.message_count % 20 == 0:
                await self.viewer_timer()
            print(message.author.name, message.content)
            if message.author.name not in self.chatters:
                self.chatters.append(message.author.name)
            await self.handle_commands(message)