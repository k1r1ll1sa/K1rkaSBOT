"""–ú–æ–¥—É–ª—å —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞"""
import random
from operator import index

import httpx
import urllib.parse
import requests
import twitchio.errors
from certifi.core import exit_cacert_ctx
from twitchio import Message
from twitchio.ext import commands
from twitchio.ext.commands import CommandOnCooldown, Cooldown, Bucket
from twitchio.models import PartialUser
from twitchio.http import TwitchHTTP
from twitchio.errors import HTTPException
import asyncio
from datetime import datetime, timezone
from dateutil.parser import parse
from googletrans import Translator
import json
import itertools
import re
import rating

rating = rating.Rating()

def init_bot(nickname, root):
    try:
        with open("tokens.json", "r", encoding="utf-8") as tokens:
            config = json.load(tokens)
        token = config["token"]
        client_secret = config["client_secret"]
        client_id = config["client_id"]

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        bot = Bot(nickname, token, client_secret, client_id, root)
        root.bot_instance = bot
        loop.run_until_complete(bot.run())
    except Exception as e:
        print(e)

class Bot(commands.Bot):
    def __init__(self, nickname, token, client_secret, client_id, root):
        self.nickname = nickname
        self.channel = None
        self.nickname_ = "#" + nickname
        self.token = token
        self.client_secret = client_secret
        self.client_id = client_id
        self.root = root
        self.chatters = []
        self.message_count = 1
        self.http = TwitchHTTP(client_id=self.client_id, client=self, client_secret=self.client_secret)
        self.user = None # PartialUser
        self.bot_id = None

        # –†—É–ª–µ—Ç–∫–∞
        self.lose_count = 6
        self.random_count = None
        self.roulette_is_run = False

        # –ë–æ–º–±–∞
        self.colors = ['–∑–µ–ª–µ–Ω—ã–π', '–∫—Ä–∞—Å–Ω—ã–π', '—Å–∏–Ω–∏–π']
        self.correct_color = None

        # Wodly
        self.correct_word = None
        self.hidden_word = ''
        with open('russian_nouns.txt', 'r', encoding='utf-8') as file:
            self.words = [line.strip() for line in file]

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑—Ä–∏—Ç–µ–ª–µ–π
        self.prew_viewers = 0
        self.cur_viewers = 0

        # –†–æ–∑—ã–≥—Ä—ã—à
        self.raffle_key_word = '+'
        self.raffle_player_list = []
        self.raffle_flag = False
        self.raffle_black_list = []

        # –ó–∞–¥–∞—á–∞
        self.answer = 0
        self.task_flag = False

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ RU & ENG
        self.lit_dict = {"0": ["o", "–æ"],"1": ["i", "l", "!"],"2": ["z"],"3": ["e", "–∑", "–µ"],"4": ["—á", "h"],
                         "5": ["s"],"6": ["b", "–±"],"7": ["t"],"9": ["g"],"@": ["a", "–∞"],"#": ["h", "–Ω"],"$": ["s"],
                         "%": ["x"],"?": ["p"],"!": ["i"],"|": ["i", "l"], "a": ["–∞"],"b": ["–≤", "–±", "—å", "—ä"],
                         "c": ["—Å", "c"],"e": ["–µ", "—ë"],"f": ["—Ñ"],"g": ["–¥", "g"],"h": ["–Ω"],"i": ["–∏"],"j": ["—É"],
                         "k": ["–∫"],"l": ["–ª"],"m": ["–º"],"n": ["–∏", "–ø", "–π"],"o": ["–æ"],"p": ["—Ä", "–ø"],
                         "r": ["–≥", "—è"],"s": ["—Å", "–∑"],"t": ["—Ç"],"u": ["—É", "—Ü"],"v": ["u", "v"],"w": ["—à", "—â", "–≤"],
                         "x": ["—Ö"],"y": ["—É", "–π"], "(": ["—Å", "c"],")": ["j"],"<": ["k"],"+": ["—Ö", "—Ç"],
                         "]": ["j"],"=": ["–∂"],"^": ["–ª"],"}": ["–¥"],"Œõ": ["–ª"]}
        with open('banwords.txt', "r", encoding='utf-8') as file:
            lines = file.readlines()
            self.nword_list = lines[0].strip().split(', ')[1:]
            self.allow_links = lines[1].strip().split(', ')[1:]

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤
        self.last_followers = []

        super().__init__(
            prefix='!',
            token=self.token,
            client_secret=self.client_secret,
            client_id=client_id,
            initial_channels=[self.nickname_])

    async def event_ready(self):
        self.channel = self.get_channel(self.nickname)
        owner = await self.fetch_users(names=[self.nickname])
        owner_id = owner[0].id # –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ self.user, –¥–∞–ª–µ–µ –Ω–µ –Ω—É–∂–µ–Ω
        bot = await self.fetch_users(names=['k1rkasbot1k'])
        self.bot_id = bot[0].id
        self.user = PartialUser(self.http, owner_id, self.nickname)
        await self.channel.send(f'{self.nick} –∑–∞–ø—É—â–µ–Ω!')
        self.root.console_add_line(f'{self.nick} is launched on the channel {self.nickname}')

    async def event_follow(self, follower):
        with open('info.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
        if follower.name not in data['last_followers']:
            await self.channel.send(f'{follower} —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ–ª–æ—É! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫–∞–Ω–∞–ª!')
            data['last_followers'].append(follower.name)
            with open('info.json', 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=4, ensure_ascii=False)

    @commands.command(name='–ø—Ä–∏–≤–µ—Ç')
    @commands.cooldown(rate=1, per=5, bucket=commands.Bucket.channel)
    async def hello_command(self, ctx: commands.Context):
        await ctx.send(f'–ü—Ä–∏–≤–µ—Ç, {ctx.author.name}! üëã')
        self.root.console_add_line(f'{ctx.author.name} uses the command "!–ø—Ä–∏–≤–µ—Ç"')
    
    @commands.command(name='–≤—Ä–µ–º—è')
    async def time(self, ctx: commands.Context):
        await ctx.send(f'{ctx.author.name} –º–æ—ë –≤—Ä–µ–º—è: {datetime.datetime.now().strftime('%H:%M')}')
        self.root.console_add_line(f'{ctx.author.name} uses the command "!–≤—Ä–µ–º—è"')

    @commands.command(name='–≤—É–∑')
    async def university(self, ctx: commands.Context):
        await ctx.send(f'{ctx.author.name} –±–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –≤ –ª—É—á—à–µ–º –≤—É–∑–µ –Ω–∞ —Å–≤–µ—Ç–µ -> https://ikit.sfu-kras.ru')
        self.root.console_add_line(f'{ctx.author.name} uses the command "!–≤—É–∑"')

    @commands.command(name='—Ä—É–ª–µ—Ç–∫–∞')
    async def roulette(self, ctx: commands.Context, count='1'):
        if '\U000e0000' in count:
            count = 1
        try:
            count = int(count)
        except ValueError:
            count = 1
        self.root.console_add_line(f'{ctx.author.name} uses the command "!—Ä—É–ª–µ—Ç–∫–∞"') if count == 1 else (
            self.root.console_add_line(f'{ctx.author.name} uses the command "!—Ä—É–ª–µ—Ç–∫–∞" with arguments {count}'))
        if count > 1:
            self.roulette_is_run = False
        if self.roulette_is_run is False:
            if 6 >= count > 0:
                self.roulette_is_run = True
                self.random_count = random.randint(count, 6)
                if self.roul_game():
                    await ctx.send(f'{ctx.author.name} –≤—ã–∂–∏–≤–∞–µ—Ç!')
                else:
                    try:
                        await self.user.timeout_user(token=self.token[6:], moderator_id=self.bot_id, user_id=ctx.author.id, duration=60, reason='–ø—Ä–æ–∏–≥—Ä–∞–ª –≤ —Ä—É–ª–µ—Ç–∫—É...')
                        await ctx.send(f'{ctx.author.name} –ø—Ä–æ–∏–≥—Ä–∞–ª –≤ —Ä—É–ª–µ—Ç–∫—É...')
                    except Exception:
                        await ctx.send(f'{ctx.author.name} —á—É–¥–æ–º –≤—ã–∂–∏–≤–∞–µ—Ç')
            else:
                await ctx.send(f'{ctx.author.name} —Å—Ç–æ–ª—å–∫–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤ –Ω–µ –≤–ª–µ–∑–µ—Ç...')
        elif self.roulette_is_run is True:
            if self.roul_game():
                await ctx.send(f'{ctx.author.name} –≤—ã–∂–∏–≤–∞–µ—Ç!')
            else:
                try:
                    await self.user.timeout_user(token=self.token[6:], moderator_id=self.bot_id, user_id=ctx.author.id, duration=60, reason='–ø—Ä–æ–∏–≥—Ä–∞–ª –≤ —Ä—É–ª–µ—Ç–∫—É...')
                    await ctx.send(f'{ctx.author.name} –ø—Ä–æ–∏–≥—Ä–∞–ª –≤ —Ä—É–ª–µ—Ç–∫—É...')
                except Exception:
                    await ctx.send(f'{ctx.author.name} —á—É–¥–æ–º –≤—ã–∂–∏–≤–∞–µ—Ç')

    def roul_game(self):
        if self.random_count < self.lose_count:
            self.random_count += 1
            return True
        elif self.random_count >= self.lose_count:
            self.roulette_is_run = False
            return False
        else:
            return True

    @commands.command(name='–∫—É–±–∏–∫')
    async def roll(self, ctx: commands.Context, number=100):
        message = f'{ctx.author.name} uses the command "!–∫—É–±–∏–∫"' if number==100 \
            else f'{ctx.author.name} uses the command "!–∫—É–±–∏–∫" with arguments "{number}"'
        self.root.console_add_line(message)
        random_cube = random.randint(1, number)
        if random_cube == number:
            await ctx.send(f'{ctx.author.name} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö! {number} üé≤')
        elif random_cube == 1:
            await ctx.send(f'{ctx.author.name} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–ª! 1 üé≤')
        else:
            await ctx.send(f'{ctx.author.name} –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {random_cube} üé≤')

    @commands.command(name='–∫–æ–ø–∞—Ç—å')
    async def mine(self, ctx: commands.Context, command: str = '', *, phrase: str = ''):
        self.root.console_add_line(f'{ctx.author.name} uses the command "!–∫–æ–ø–∞—Ç—å"')
        if '\U000e0000' in phrase:
            phrase = phrase.replace('\U000e0000', '')
            phrase = phrase.strip()

        with open('info.json', 'r', encoding='utf-8') as f:
            info = json.load(f)
        if ctx.author.is_mod and command == '–¥–æ–±–∞–≤–∏—Ç—å' and phrase != '':
            if phrase not in list(info['mine'].values()):
                max_key = max(int(k) for k in info['mine'].keys()) if info['mine'] else 0
                next_key = str(max_key + 1)
                info['mine'][next_key] = phrase
                with open('info.json', 'w', encoding='utf-8') as f:
                    json.dump(info, f, ensure_ascii=False, indent=4)
                await ctx.send(f'–§—Ä–∞–∑–∞ "{phrase}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫!')
            else:
                await ctx.send(f'–§—Ä–∞–∑–∞ "{phrase}" —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!')
            return

        if ctx.author.is_mod and command.lower() == '—Å–ø–∏—Å–æ–∫':
            if not info['mine']:
                await ctx.send("–°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ –ø—É—Å—Ç!")
                return
            try:
                page = int(phrase) if phrase else 1
            except ValueError:
                page = 1

            sorted_phrases = sorted(info['mine'].items(), key=lambda x: int(x[0]))
            total_phrases = len(sorted_phrases)
            phrases_per_page = 5

            # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É (450 —Å–∏–º–≤–æ–ª–æ–≤)
            while True:
                test_message = "–°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1/1): " + "".join(f"{num} - {text}, " for num, text in sorted_phrases[:phrases_per_page])
                if len(test_message) <= 450 or phrases_per_page <= 1:
                    break
                phrases_per_page -= 1
            total_pages = (total_phrases + phrases_per_page - 1) // phrases_per_page
            page = max(1, min(page, total_pages))
            start_idx = (page - 1) * phrases_per_page
            end_idx = min(start_idx + phrases_per_page, total_phrases)
            phrases_list = "".join(f"{num} - {text}, " for num, text in sorted_phrases[start_idx:end_idx])

            if phrases_list.endswith(', '):
                phrases_list = phrases_list[:-2] + '...'
            message = (f"–°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}): {phrases_list}")
            if len(message) > 450:
                message = message[:447] + "..."
            await ctx.send(message)
            return

        if ctx.author.is_mod and command.lower() == '—É–¥–∞–ª–∏—Ç—å':
            if not phrase:
                await ctx.send("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ—Ä–∞–∑—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
                return
            try:
                del_key = phrase
                if del_key not in info['mine']:
                    await ctx.send(f"–§—Ä–∞–∑–∞ —Å –Ω–æ–º–µ—Ä–æ–º {del_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                    return

                deleted_phrase = info['mine'].pop(del_key)
                new_mine = {}
                current_num = 1

                # –°–¥–≤–∏–≥ –∫–ª—é—á–µ–π
                for old_num in sorted(info['mine'].keys(), key=int):
                    new_mine[str(current_num)] = info['mine'][old_num]
                    current_num += 1

                info['mine'] = new_mine
                with open('info.json', 'w', encoding='utf-8') as f:
                    json.dump(info, f, ensure_ascii=False, indent=4)
                await ctx.send(f'–§—Ä–∞–∑–∞ "{deleted_phrase}" (‚Ññ{del_key}) —É–¥–∞–ª–µ–Ω–∞!')
            except ValueError:
                await ctx.send("–ù–æ–º–µ—Ä —Ñ—Ä–∞–∑—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return

        # –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–¥-–∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ
        phrase = random.choice(list(info['mine'].values()))
        await ctx.send(f'{ctx.author.name} {phrase}!')

    @commands.command(name='—á–∞–π')
    async def tea(self, ctx: commands.Context, user=None):
        self.root.console_add_line(f'{ctx.author.name} uses the command "!—á–∞–π" with arguments {user}')\
            if user else self.root.console_add_line(f'{ctx.author.name} uses the command "!—á–∞–π"')
        if user is not None:
            user = user.lower()
            if '@' in user:
                user = user.replace('@', '')
                print(user)
        print(self.chatters)
        if user and user in self.chatters:
            await ctx.send(f'{ctx.author.name} —É–≥–æ—Å—Ç–∏–ª —á–∞–µ–º {user}')
        else:
            await ctx.send(f'{ctx.author.name} —É–≥–æ—Å—Ç–∏–ª —á–∞–µ–º {random.choice(self.chatters)}')

    @commands.command(name='–±–æ–º–±–∞')
    async def bomb(self, ctx: commands.Context):
        self.root.console_add_line(f'{ctx.author.name} uses the command "!–±–æ–º–±–∞"')
        if self.correct_color is None:
            await ctx.send('–£–≥–∞–¥–∞–π —Ü–≤–µ—Ç, —á—Ç–æ–±—ã —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –±–æ–º–±—É! (!–∑–µ–ª—ë–Ω—ã–π, !–∫—Ä–∞—Å–Ω—ã–π, !—Å–∏–Ω–∏–π)')
            self.correct_color = random.choice(self.colors)

    @commands.command(name='–∑–µ–ª—ë–Ω—ã–π', aliases=['–∑–µ–ª–µ–Ω—ã–π', 'green']) # —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    async def bomb_green(self, ctx: commands.Context):
        self.root.console_add_line(f'{ctx.author.name} uses the command "!–∑–µ–ª—ë–Ω—ã–π"')
        if self.correct_color is not None:
            if self.correct_color in ['–∑–µ–ª—ë–Ω—ã–π', '–∑–µ–ª–µ–Ω—ã–π']:
                await ctx.send(f'{ctx.author.name} —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–ª –±–æ–º–±—É!')
            else:
                try:
                    await self.user.timeout_user(token=self.token[6:], moderator_id=self.bot_id, user_id=ctx.author.id,
                                                 duration=60, reason='—Ç–∞–∫–æ–π —Å–µ–±–µ —Å–∞–ø—ë—Ä...')
                    await ctx.send(f'{ctx.author.name} –æ–∫–∞–∑–∞–ª—Å—è —Ç–∞–∫–æ–π —Å–µ–±–µ —Å–∞–ø—ë—Ä...')
                except Exception:
                    await ctx.send(f'{ctx.author.name} —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç –≤–∑—Ä—ã–≤–∞!')
            self.correct_color = None
        else:
            await ctx.send(f'{ctx.author.name} –∏–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! –ø–∏—à–∏ "!–±–æ–º–±–∞"')

    @commands.command(name='–∫—Ä–∞—Å–Ω—ã–π')
    async def bomb_red(self, ctx: commands.Context):
        self.root.console_add_line(f'{ctx.author.name} uses the command "!–∫—Ä–∞—Å–Ω—ã–π"')
        if self.correct_color is not None:
            if self.correct_color == '–∫—Ä–∞—Å–Ω—ã–π':
                await ctx.send(f'{ctx.author.name} —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–ª –±–æ–º–±—É!')
            else:
                try:
                    await self.user.timeout_user(token=self.token[6:], moderator_id=self.bot_id, user_id=ctx.author.id,
                                                 duration=60, reason='—Ç–∞–∫–æ–π —Å–µ–±–µ —Å–∞–ø—ë—Ä...')
                    await ctx.send(f'{ctx.author.name} –æ–∫–∞–∑–∞–ª—Å—è —Ç–∞–∫–æ–π —Å–µ–±–µ —Å–∞–ø—ë—Ä...')
                except Exception:
                    await ctx.send(f'{ctx.author.name} —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç –≤–∑—Ä—ã–≤–∞!')
            self.correct_color = None
        else:
            await ctx.send(f'{ctx.author.name} –∏–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! –ø–∏—à–∏ "!–±–æ–º–±–∞"')

    @commands.command(name='—Å–∏–Ω–∏–π')
    async def bomb_blue(self, ctx: commands.Context):
        self.root.console_add_line(f'{ctx.author.name} uses the command "!—Å–∏–Ω–∏–π"')
        if self.correct_color is not None:
            if self.correct_color == '—Å–∏–Ω–∏–π':
                await ctx.send(f'{ctx.author.name} —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–ª –±–æ–º–±—É!')
            else:
                try:
                    await self.user.timeout_user(token=self.token[6:], moderator_id=self.bot_id, user_id=ctx.author.id,
                                                 duration=60, reason='—Ç–∞–∫–æ–π —Å–µ–±–µ —Å–∞–ø—ë—Ä...')
                    await ctx.send(f'{ctx.author.name} –æ–∫–∞–∑–∞–ª—Å—è —Ç–∞–∫–æ–π —Å–µ–±–µ —Å–∞–ø—ë—Ä...')
                except Exception:
                    await ctx.send(f'{ctx.author.name} —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç –≤–∑—Ä—ã–≤–∞!')
            self.correct_color = None
        else:
            await ctx.send(f'{ctx.author.name} –∏–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! –ø–∏—à–∏ "!–±–æ–º–±–∞"')

    @commands.command(name='—Å–ª–æ–≤–æ')
    async def word(self, ctx: commands.Context, word=None):
        self.root.console_add_line(f'{ctx.author.name} uses the command "—Å–ª–æ–≤–æ" with arguments {word}') if word \
            else self.root.console_add_line(f'{ctx.author.name} uses the command "—Å–ª–æ–≤–æ"')
        if self.correct_word is None:
            self.correct_word = random.choice(self.words).strip()
            self.hidden_word = '‚ñØ' * len(self.correct_word)
            print(self.correct_word)
            await ctx.send(f'{ctx.author.name} –ø–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ! –û–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(self.correct_word)} –±—É–∫–≤!')
        elif self.correct_word is not None and word in self.words:
            hidden_word_list = list(self.hidden_word)
            for i, let in enumerate(self.correct_word):
                if let in word:
                    hidden_word_list[i] = let
            self.hidden_word = ''.join(hidden_word_list)
            if '‚ñØ' in self.hidden_word:
                await ctx.send(f'{ctx.author.name} —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {self.hidden_word}')
            else:
                encoded_word = urllib.parse.quote(self.correct_word.lower())
                wiki_url = f"https://ru.wikipedia.org/w/index.php?search={encoded_word}"
                await ctx.send(f'{ctx.author.name} –≤—ã –æ—Ç–≥–∞–¥–∞–ª–∏ –≤—Å–µ –±—É–∫–≤—ã! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {self.correct_word}. '
                               f'–ü–æ—á–∏—Ç–∞—Ç—å –∑–¥–µ—Å—å -> {wiki_url}')
                self.correct_word = None
        elif word not in self.words:
            await ctx.send(f'{ctx.author.name} —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –º–æ—ë–º —Å–ª–æ–≤–∞—Ä–µ!')


    # –ü–æ–ª—É—á–∏—Ç—å data (–∫–æ–ª-–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π –∏ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏)
    async def get_viewer_count(self):
        nickname_ = "https://api.twitch.tv/helix/streams?user_login=" + self.nickname
        async with httpx.AsyncClient() as client:
            response = await client.get(nickname_, headers={
                'Client-ID': f'{self.client_id}',
                'Authorization': f'Bearer {self.token[6:]}'
            })
            data = response.json()
            if data['data']:
                viewer_count = data['data'][0]['viewer_count']
                started_at = data['data'][0]['started_at']
                stream_duration = self.calculate_stream_duration(started_at)
                return viewer_count, stream_duration
            return 0, '–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –Ω–µ –≤–µ–¥–µ—Ç—Å—è'

    def calculate_stream_duration(self, started_at):
        start_time = parse(started_at[:-1] if started_at.endswith('Z') else started_at)
        duration = datetime.utcnow() - start_time
        hours, remainder = divmod(duration.total_seconds(), 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{int(hours):02}:{int(minutes):02}:{int(seconds):02}"

    @commands.command(name='–∑—Ä–∏—Ç–µ–ª–∏')
    async def viewers_info(self, ctx: commands.Context):
        if ctx.author.is_mod:
            self.cur_viewer, stream_dur = await self.get_viewer_count()
            diff = self.cur_viewer - self.prew_viewers
            if diff == 0:
                await ctx.send(f'{self.cur_viewer} ({stream_dur} üïù)!')
            elif diff > 0:
                await ctx.send(f'{self.cur_viewer} (+{diff}üë§) ({stream_dur} üïù)!')
            elif diff < 0:
                await ctx.send(f'{self.cur_viewer} ({diff}üë§) ({stream_dur} üïù)!')
            self.prew_viewers = self.cur_viewer

    async def viewer_timer(self):
        self.cur_viewer, stream_dur = await self.get_viewer_count()
        diff = self.cur_viewer - self.prew_viewers
        if diff == 0:
            await self.channel.send(f'{self.cur_viewer} ({stream_dur} üïù)!')
        elif diff > 0:
            await self.channel.send(f'{self.cur_viewer} (+{diff}üë§) ({stream_dur} üïù)!')
        elif diff < 0:
            await self.channel.send(f'{self.cur_viewer} ({diff}üë§) ({stream_dur} üïù)!')
        self.prew_viewers = self.cur_viewer

    @commands.command(name='—Ä–æ–∑—ã–≥—Ä—ã—à')
    async def raffle(self, ctx: commands.Context, command: str = '–Ω–∞—á–∞—Ç—å', atr: str = '+'):
        if ctx.author.is_mod:
            if command == '–Ω–∞—á–∞—Ç—å':
                self.raffle_key_word = '+'
                self.raffle_player_list = []
                self.raffle_key_word = atr if atr !='+' else '+'
                self.raffle_flag = True
                await ctx.send(f'–†–æ–∑—ã–≥—Ä—ã—à –Ω–∞—á–∞–ª—Å—è! –ü–∏—à–∏ {self.raffle_key_word}, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!')
            elif command == '–æ—Ç—Å—Ç—Ä–∞–Ω–∏—Ç—å' and self.raffle_flag:
                atr = atr.lower()
                if '@' in atr:
                    atr = atr.replace('@', '')
                if atr in self.raffle_player_list:
                    self.raffle_black_list.append(atr)
                    self.raffle_player_list = [player for player in self.raffle_player_list if player != atr]
                    await ctx.send(f'{atr} –æ—Ç—Å—Ç—Ä–∞–Ω—ë–Ω –æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞!')
            elif command == '–¥–æ–±–∞–≤–∏—Ç—å' and self.raffle_flag:
                atr = atr.lower()
                if '@' in atr:
                    atr = atr.replace('@', '')
                if atr in self.raffle_black_list:
                    self.raffle_black_list.remove(atr)
                if atr not in self.raffle_player_list:
                    self.raffle_player_list.append(atr)
                    await ctx.send(f'{atr} –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à!')
            elif command == '–æ—á–∏—Å—Ç–∏—Ç—å' and self.raffle_flag:
                if atr == '+':
                    self.raffle_player_list = []
                    await ctx.send('–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω!')
                elif atr == '-':
                    self.raffle_black_list = []
                    await ctx.send('–°–ø–∏—Å–æ–∫ –æ—Ç—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–π –æ—á–∏—â–µ–Ω!')
                else:
                    self.raffle_player_list = []
                    await ctx.send('–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω!')
            elif command == '–∑–∞–∫–æ–Ω—á–∏—Ç—å' and self.raffle_flag:
                if len(self.raffle_player_list) == 0:
                    await ctx.send('–í —Å–ø–∏—Å–∫–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')
                    if atr == '-':
                        await ctx.send('–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.')
                        self.raffle_flag = False
                        self.raffle_black_list = []
                if len(self.raffle_player_list) != 0:
                    self.raffle_flag = False
                    self.raffle_key_word = '+'
                    await ctx.send(f'{random.choice(self.raffle_player_list)} –ø–æ–±–µ–¥–∏–ª –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!')
                if atr == '–æ—á–∏—Å—Ç–∏—Ç—å':
                    await ctx.send('–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω.')
                    self.raffle_player_list = []
                    self.raffle_black_list = []
            elif command == '—Å–ø–∏—Å–æ–∫' and self.raffle_flag:
                if atr == '+':
                    uniq_player_list = set(self.raffle_player_list)
                    await ctx.send(f'–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {", ".join(uniq_player_list)}')
                elif atr == '-':
                    uniq_black_list = set(self.raffle_black_list)
                    await ctx.send(f'–°–ø–∏—Å–æ–∫ –æ—Ç—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {", ".join(uniq_black_list)}')
            elif not self.raffle_flag:
                await ctx.send('–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –±—ã–ª –Ω–∞—á–∞—Ç.')

    @commands.command(name='—Ñ–æ–ª–æ—É', aliases=['—Ñ–æ–ª–ª–æ—É', 'followage'])
    async def followage(self, ctx: commands.Context):
        broadcaster = await self.fetch_users(names=[self.nickname])
        broadcaster_id = broadcaster[0].id
        follow_data = await self.http.get_channel_followers(broadcaster_id=broadcaster_id, user_id=ctx.author.id, token=self.token[6:])
        if not follow_data:
            await ctx.send(f'@{ctx.author.name} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª.')
            return
        followed_at = follow_data[0]['followed_at']
        if isinstance(followed_at, str):
            followed_at = datetime.fromisoformat(followed_at.replace('Z', '+00:00'))
        now = datetime.now(timezone.utc)
        delta = now - followed_at
        years = delta.days // 365
        months = (delta.days % 365) // 30
        days = (delta.days % 365) % 30
        time_parts = [] # –¥–∞—Ç–∞: –≥–æ–¥/–º–µ—Å—è—Ü/–¥–µ–Ω—å
        if years: time_parts.append(f"{years} {'–≥–æ–¥' if years == 1 else '–≥–æ–¥–∞' if 2 <= years <= 4 else '–ª–µ—Ç'}")
        if months: time_parts.append(f"{months} {'–º–µ—Å—è—Ü–µ–≤' if months >= 5 or months == 0 else '–º–µ—Å—è—Ü' if months == 1 else '–º–µ—Å—è—Ü–∞'}")
        if days: time_parts.append(f"{days} {'–¥–Ω–µ–π' if days >= 5 or days == 0 else '–¥–µ–Ω—å' if days == 1 else '–¥–Ω—è'}")
        if not time_parts:
            await ctx.send(f'@{ctx.author.name} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª –º–µ–Ω–µ–µ –¥–Ω—è!')
        else:
            await ctx.send(f'@{ctx.author.name} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª —É–∂–µ {" ".join(time_parts)}!')

    @commands.command(name='–∑–∞–¥–∞—á–∞')
    async def task(self, ctx: commands.Context):
        x = random.randint(1, 100)
        y = random.randint(1, 100)
        arithmetic = {'+': lambda: x + y,
                      '-': lambda: x - y,
                      '*': lambda: x * y,
                      '/': lambda: round(x / y, 2)}
        operation = random.choice(list(arithmetic.keys()))
        self.answer = arithmetic[operation]()
        await ctx.send(f'–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä: {x} {operation} {y}')
        self.task_flag = True

    @commands.command(name='—à—É—Ç–∫–∞')
    async def joke(self, ctx: commands.Context):
        joke = requests.get('https://official-joke-api.appspot.com/random_joke').json()
        setup = joke['setup']
        punchline = joke['punchline']
        final_joke = (f'{setup} {punchline}')

        translator = Translator()
        trans_final_joke = await translator.translate(final_joke, dest='ru')
        trans_text_joke = trans_final_joke.text
        await ctx.send(f"–í–ù–ò–ú–ê–ù–ò–ï! –ê–Ω–µ–∫–¥–æ—Ç: {trans_text_joke}")

    # –¢–æ–ø-5 —á–∞—Ç–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
    @commands.command(name='—Ä–µ–π—Ç–∏–Ω–≥')
    async def rating(self, ctx: commands.Context):
        top = rating.get_top_users()
        await ctx.send(f'–¢–æ–ø —á–∞—Ç–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–π–∏: {", ".join([f"{1 + top.index(nick)}. {nick[0]}: "
                       f"{nick[1]['message_count']} ‚úâÔ∏è" for nick in top])}.'
                       f' –í–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {rating.get_msg(ctx.author.name)} üì´')

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏
    def bunword_check(self, message):
        def normalize_repeats(word):
            if len(word) < 2:
                return word
            normalized = []
            prev_char = word[0]
            normalized.append(prev_char)
            for char in word[1:]:
                if char != prev_char:
                    normalized.append(char)
                    prev_char = char
            return ''.join(normalized)
        words = message.lower().split()

        for word in words:
            if len(word) > 20 or len(word) < 3:
                continue
            variants = []
            word = normalize_repeats(word)
            for char in word:
                if char in self.lit_dict:
                    variants.append([char] + self.lit_dict[char])
                else:
                    variants.append([char])
            all_combinations = {''.join(combination) for combination in itertools.product(*variants)}
            for ban_word in self.nword_list:
                if ban_word.endswith('*'):
                    base_word = ban_word[:-1]
                    if any(comb.startswith(base_word) for comb in all_combinations):
                        print("2")
                        return True
                else:
                    if ban_word in all_combinations:
                        print("2")
                        return True
        return False

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    def links_check(self, message):
        url_pattern = r'''(?:https?://|ftp://)(?:[a-z0-9-]+\.)+[a-z]{2,4}(?:[/?#][^\s]*)?|
        \bwww\.(?:[a-z0-9-]+\.)+[a-z]{2,4}(?:[/?#][^\s]*)?|\b(?:[a-z0-9-]+\.){1,2}[a-z]{2,4}\b'''
        urls = re.findall(url_pattern, message, re.VERBOSE | re.IGNORECASE)

        for url in urls:
            lower_url = url.lower()
            if not any(allowed.lower() in lower_url for allowed in self.allow_links):
                return True
        return False

        # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    async def event_message(self, message: Message):
        if message.author is None:
            pass # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        else:
            # –ê–≤—Ç–æ–º–æ–¥
            print(message.content)
            rating.add_msg(message.author.name)
            try:
                if self.links_check(message.content):
                    if rating.get_timeout(message.author.name) >= 5:
                        await self.user.timeout_user(token=self.token[6:], moderator_id=self.bot_id, user_id=message.author.id,
                                                    duration=3600, reason='–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏')
                    else:
                        await self.user.timeout_user(token=self.token[6:], moderator_id=self.bot_id, user_id=message.author.id,
                                                     duration=5, reason='–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏')
                    rating.add_timeout(message.author.name)
                elif self.bunword_check(message.content):
                    if rating.get_timeout(message.author.name) >= 5:
                         await self.user.timeout_user(token=self.token[6:], moderator_id=self.bot_id, user_id=message.author.id,
                                                    duration=3600, reason='–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞ –≤ —á–∞—Ç–µ')
                    else:
                        await self.user.timeout_user(token=self.token[6:], moderator_id=self.bot_id, user_id=message.author.id,
                                                     duration=5, reason='–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞ –≤ —á–∞—Ç–µ')
                    rating.add_timeout(message.author.name)
                else:
                    pass
            except Exception as e:
                print(e)
            # –†–æ–∑—ã–≥—Ä—ã—à–∏
            if (self.raffle_flag and message.author.name not in self.raffle_player_list
                    and message.content == self.raffle_key_word and message.author.name not in self.raffle_black_list):
                self.raffle_player_list.append(message.author.name)
                if message.author.is_subscriber:
                    self.raffle_player_list.append(message.author.name)
                await self.channel.send(f'{message.author.name} –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à!')
            # –ó–∞–¥–∞—á–∞
            if self.task_flag:
                msg = str(message.content)
                msg = msg.replace(',', '.')
                if msg == str(self.answer):
                    await self.channel.send(f'{message.author.name} –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {msg}!')
                    self.task_flag = False
            # –ó—Ä–∏—Ç–µ–ª–∏
            self.message_count += 1
            if self.message_count % 50 == 0:
                await self.viewer_timer()
            if message.author.name not in self.chatters:
                self.chatters.append(message.author.name)
            await self.handle_commands(message)

    async def event_command_error(self, error: Exception, data: str = None):
        if isinstance(error, CommandOnCooldown):
            pass
